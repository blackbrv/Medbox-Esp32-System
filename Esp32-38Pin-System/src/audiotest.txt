#include <Arduino.h>
#include <Wire.h>
#include <RTClib.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <Adafruit_Fingerprint.h>
#include <FPM.h>
#include <Audio.h>
#include "HX711.h"
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include "BluetoothA2DPSink.h"

#define I2S_DOUT 25
#define I2S_BCLK 27
#define I2S_LRC 26
#define WIFI_SSID "Psg567uber" //Lacasa salam dari Ibrahim //Psg567uber
#define WIFI_PASSWORD "Akca130797" //iyatunggu //Akca130797

Audio audio;

void setup(){
  Serial.begin(115200);

  WiFi.disconnect();
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(300);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Connected with IP : ");
  Serial.println(WiFi.localIP());
  Serial.println();

  audio.setPinout(I2S_BCLK, I2S_LRC, I2S_DOUT);
  audio.setVolume(100);
  audio.connecttospeech("Saatnya Minum Obat", "id"); // Google TTS
}

void loop()
{
  audio.loop();
}

void audio_info(const char *info) {
  Serial.print("audio_info: "); Serial.println(info);
}

//with bluetooth******************************************************************************

BluetoothA2DPSink a2dp_sink;

void setup() {
    i2s_pin_config_t my_pin_config = {
        .mck_io_num = I2S_PIN_NO_CHANGE,
        .bck_io_num = 27,
        .ws_io_num = 26,
        .data_out_num = 25,
        .data_in_num = I2S_PIN_NO_CHANGE
    };
    a2dp_sink.set_pin_config(my_pin_config);
    a2dp_sink.start("MyMusic");
}

void loop() {
}

// Audio with RTC ******************************************************************************
#include <Arduino.h>
#include <Wire.h>
#include <RTClib.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <Audio.h>
#include <Adafruit_Fingerprint.h>
#include <LiquidCrystal_I2C.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <WebSerial.h>
#include "HX711.h"
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include <Arduino.h>
#include <Wire.h>
#include <RTClib.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <Audio.h>
#include <Adafruit_Fingerprint.h>
#include <LiquidCrystal_I2C.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <WebSerial.h>
#include "HX711.h"
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define I2S_DOUT 25
#define I2S_BCLK 27
#define I2S_LRC 26

#define WIFI_SSID "Psg567uber" //Lacasa salam dari Ibrahim //Psg567uber
#define WIFI_PASSWORD "Akca130797" //iyatunggu //Akca130797
#define API_KEY "AIzaSyB-o1L9crZrI-IqR8S5jmMtMopJeDb98mk"
#define DATABASE_URL "https://madbox4195-default-rtdb.firebaseio.com/"
#define ESP32_KEY "Alat1"

// Definisikan pin koneksi & langkah per revolusi motor
const int SDA_PIN = 21; // SDA pin pada ESP32
const int SCL_PIN = 22; // SCL pin pada ESP32
const int dirPin = 18;  
const int stepPin = 19; 
const int relaypin = 2;
const int stepsPerRevolution = 200;

int Sudahwaktunya = 0;

RTC_DS3231 rtc;
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
bool signupOK = false;

String daysOfTheWeek[7] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

Audio audio;
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 25200, 60000);

void RtcRunner();
void StepperRun();
void Reminder();

void setup() {
  Serial.begin(115200);

  audio.setPinout(I2S_BCLK, I2S_LRC, I2S_DOUT);
  audio.setVolume(100);

  Wire.begin(SDA_PIN, SCL_PIN);

  if (!rtc.begin())
  {
    Serial.println("Couldn't find RTC");
    while (1)
      ;
  }

  if (rtc.lostPower()) {
    Serial.println("RTC lost power, setting the time!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  WiFi.disconnect();
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(300);
    Serial.print(".");
  }

  timeClient.begin();
  while(!timeClient.update()) {
    timeClient.forceUpdate();
  }

  rtc.adjust(DateTime(timeClient.getEpochTime()));

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  if (Firebase.signUp(&config, &auth, "", "")) {
    signupOK = true;
  } else {
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }
  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(relaypin, OUTPUT);
}

void loop() {
  RtcRunner();
  Reminder
}

void RtcRunner(){
  audio.loop();
  DateTime now = rtc.now();
  int jam1rtc = now.hour();
  int menit1rtc = now.minute();
  String hari = daysOfTheWeek[now.dayOfTheWeek()];

    if (Firebase.ready() && signupOK)
  {
    String path = String(ESP32_KEY) + "/Jam1";
    if (Firebase.getString(fbdo, path.c_str()))
    {
      String waktu = fbdo.stringData();
      int separatorIndex = waktu.indexOf(':');
      if (separatorIndex != -1)
      {
        String jamString = waktu.substring(0, separatorIndex);
        String menitString = waktu.substring(separatorIndex + 1);
        int jamFirebase = jamString.toInt(); // Menyimpan jam dari Firebase
        int menitFirebase = menitString.toInt(); // Menyimpan menit dari Firebase
        Serial.print("Data from Firebase: Jam ");
        Serial.print(jamFirebase);
        Serial.print(", Menit ");
        Serial.println(menitFirebase);
        Serial.print("Jam saat ini : ");
        Serial.print(jam1rtc, DEC);
        Serial.print(" : ");
        Serial.println(menit1rtc, DEC);
        if (jam1rtc == jamFirebase && menit1rtc == menitFirebase) // Membandingkan jam dan menit dari RTC dengan jam dan menit dari Firebase
        {
          StepperRun();
          Sudahwaktunya = 1;
        }
      }
      else
      {
        Serial.println("Invalid time format from Firebase");
      }
    }
    else
    {
      Serial.print("Failed to get data from Firebase: ");
      Serial.println(fbdo.errorReason());
    }

    delay(5000); //delay for the run
  }

}

void StepperRun (){
  digitalWrite(relaypin, HIGH);
  digitalWrite(dirPin, HIGH);
  for (int x = 0; x < stepsPerRevolution; x++) {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(1000);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(1000);
  }
  delay(10000);
  digitalWrite(relaypin, LOW);
  }

void audio_info(const char *info) {
  Serial.print("audio_info: "); Serial.println(info);
}

void Reminder()
{
  if(Sudahwaktunya == 1)
  {
    audio.connecttospeech("Saatnya Minum Obat", "id");
  }
}
    

//Audio Test ******************************************************************************
#include <Arduino.h>
#include <Wire.h>
#include <RTClib.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <Audio.h>
#include <Adafruit_Fingerprint.h>
#include <LiquidCrystal_I2C.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <WebSerial.h>
#include "HX711.h"
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define I2S_DOUT 25
#define I2S_BCLK 27
#define I2S_LRC 26
#define WIFI_SSID "Psg567uber" //Lacasa salam dari Ibrahim //Psg567uber
#define WIFI_PASSWORD "Akca130797" //iyatunggu //Akca130797

const int btn = 12;

Audio audio;
void Reminder();

void setup(){
  Serial.begin(115200);

  WiFi.disconnect();
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(300);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Connected with IP : ");
  Serial.println(WiFi.localIP());
  Serial.println();

  audio.setPinout(I2S_BCLK, I2S_LRC, I2S_DOUT);
  audio.setVolume(100);
  //audio.connecttospeech("Saatnya Minum Obat", "id"); // Google TTS
  pinMode(btn, INPUT_PULLUP);
}

void loop()
{
  audio.loop();
  Reminder();
}

void audio_info(const char *info) {
  Serial.print("audio_info: "); Serial.println(info);
}

void Reminder() {
  static bool reminderPlayed = false;

  if (!reminderPlayed) {
    audio.connecttospeech("Saatnya Minum Obat", "id"); // Google TTS
    reminderPlayed = true;
  }
}

